License.txt
MANIFEST.in
NOTES
README.md
changelog.txt
pyproject.toml
setup.cfg
setup.py
examples/demoapps/ApiFieldsExample.py
examples/demoapps/BroadcastPublisherExample.py
examples/demoapps/ContributionsExample.py
examples/demoapps/EntitlementsVerificationRequestResponseExample.py
examples/demoapps/EntitlementsVerificationSubscriptionExample.py
examples/demoapps/GenerateTokenExample.py
examples/demoapps/InteractivePublisherExample.py
examples/demoapps/MultipleRequestsOverrideExample.py
examples/demoapps/README.md
examples/demoapps/RequestResponseExample.py
examples/demoapps/RequestServiceConsumerExample.py
examples/demoapps/RequestServiceProviderExample.py
examples/demoapps/SecurityLookupExample.py
examples/demoapps/SnapshotRequestTemplateExample.py
examples/demoapps/SubscriptionExample.py
examples/demoapps/SubscriptionWithEventPollingExample.py
examples/demoapps/UserModeExample.py
examples/demoapps/blpapi_import_helper/__init__.py
examples/demoapps/snippets/apiflds/ApiFieldsRequestUtils.py
examples/demoapps/snippets/apiflds/CategorizedFieldSearchRequests.py
examples/demoapps/snippets/apiflds/FieldInfoRequests.py
examples/demoapps/snippets/apiflds/FieldListRequests.py
examples/demoapps/snippets/apiflds/FieldSearchRequests.py
examples/demoapps/snippets/instruments/CurveListRequests.py
examples/demoapps/snippets/instruments/GovtListRequests.py
examples/demoapps/snippets/instruments/InstrumentListRequests.py
examples/demoapps/snippets/requestresponse/HistoricalDataRequest.py
examples/demoapps/snippets/requestresponse/IntradayBarRequests.py
examples/demoapps/snippets/requestresponse/IntradayTickRequests.py
examples/demoapps/snippets/requestresponse/ReferenceDataRequests.py
examples/demoapps/util/ConnectionAndAuthOptions.py
examples/demoapps/util/MaxEventsOption.py
examples/demoapps/util/RequestOptions.py
examples/demoapps/util/SubscriptionOptions.py
examples/demoapps/util/events/SessionRouter.py
examples/unittests/market-data-notifier/README.md
examples/unittests/market-data-notifier/diagram.png
examples/unittests/market-data-notifier/src/__init__.py
examples/unittests/market-data-notifier/src/appconfig.py
examples/unittests/market-data-notifier/src/application.py
examples/unittests/market-data-notifier/src/authorizer.py
examples/unittests/market-data-notifier/src/compute_engine.py
examples/unittests/market-data-notifier/src/event_processor.py
examples/unittests/market-data-notifier/src/main.py
examples/unittests/market-data-notifier/src/notifier.py
examples/unittests/market-data-notifier/src/subscriber.py
examples/unittests/market-data-notifier/src/token_generator.py
examples/unittests/market-data-notifier/tests/test_application.py
examples/unittests/market-data-notifier/tests/test_authorizer.py
examples/unittests/market-data-notifier/tests/test_eventprocessor.py
examples/unittests/market-data-notifier/tests/test_tokengenerator.py
examples/unittests/snippets/test_events.py
examples/unittests/snippets/test_refdata.py
examples/unittests/snippets/resolver/resolverutils.py
examples/unittests/snippets/resolver/test_resolverutils.py
src/blpapi/internals_wrap.c
src/blpapi/versionhelper_wrap.c
src/blpapi/__init__.py
src/blpapi/abstractsession.py
src/blpapi/auth.py
src/blpapi/chandle.py
src/blpapi/constant.py
src/blpapi/datatype.py
src/blpapi/datetime.py
src/blpapi/debug.py
src/blpapi/debug_environment.py
src/blpapi/diagnosticsutil.py
src/blpapi/element.py
src/blpapi/event.py
src/blpapi/eventdispatcher.py
src/blpapi/eventformatter.py
src/blpapi/exception.py
src/blpapi/highresclock.py
src/blpapi/identity.py
src/blpapi/internals.py
src/blpapi/logging.py
src/blpapi/message.py
src/blpapi/name.py
src/blpapi/names.py
src/blpapi/providersession.py
src/blpapi/request.py
src/blpapi/requesttemplate.py
src/blpapi/resolutionlist.py
src/blpapi/schema.py
src/blpapi/service.py
src/blpapi/session.py
src/blpapi/sessionoptions.py
src/blpapi/subscriptionlist.py
src/blpapi/topic.py
src/blpapi/topiclist.py
src/blpapi/typehints.py
src/blpapi/utils.py
src/blpapi/version.py
src/blpapi/versionhelper.py
src/blpapi/zfputil.py
src/blpapi.egg-info/PKG-INFO
src/blpapi.egg-info/SOURCES.txt
src/blpapi.egg-info/dependency_links.txt
src/blpapi.egg-info/top_level.txt
src/blpapi/test/__init__.py
src/blpapi/test/messageformatter.py
src/blpapi/test/messageproperties.py
src/blpapi/test/testutil.py
class Student:
    def __init__(self, roll_number, name, age, grade):
        self.roll_number = roll_number
        self.name = name
        self.age = age
        self.grade = grade

    def __str__(self):
        return f"Roll Number: {self.roll_number}, Name: {self.name}, Age: {self.age}, Grade: {self.grade}"

class StudentManagementSystem:
    def __init__(self):
        self.students = []

    def add_student(self, student):
        self.students.append(student)
        print(f"Student {student.name} added to the system.")

    def view_students(self):
        if not self.students:
            print("No students in the system.")
        else:
            print("Student Records:")
            for student in self.students:
                print(student)

    def update_student(self, roll_number, new_name, new_age, new_grade):
        for student in self.students:
            if student.roll_number == roll_number:
                student.name = new_name
                student.age = new_age
                student.grade = new_grade
                print(f"Student {student.name}'s record updated.")
                return
        print(f"Student with roll number {roll_number} not found.")

    def delete_student(self, roll_number):
        for student in self.students:
            if student.roll_number == roll_number:
                self.students.remove(student)
                print(f"Student {student.name} removed from the system.")
                return
        print(f"Student with roll number {roll_number} not found.")

def main():
    student_system = StudentManagementSystem()

    while True:
        print("\nStudent Management System Menu:")
        print("1. Add student")
        print("2. View students")
        print("3. Update student record")
        print("4. Delete student record")
        print("5. Exit")

        choice = input("Enter your choice (1/2/3/4/5): ")

        if choice == "1":
            roll_number = int(input("Enter roll number: "))
            name = input("Enter student name: ")
            age = int(input("Enter student age: "))
            grade = input("Enter student grade: ")
            student = Student(roll_number, name, age, grade)
            student_system.add_student(student)
        elif choice == "2":
            student_system.view_students()
        elif choice == "3":
            roll_number = int(input("Enter roll number of the student to update: "))
            new_name = input("Enter new student name: ")
            new_age = int(input("Enter new student age: "))
            new_grade = input("Enter new student grade: ")
            student_system.update_student(roll_number, new_name, new_age, new_grade)
        elif choice == "4":
            roll_number = int(input("Enter roll number of the student to delete: "))
            student_system.delete_student(roll_number)
        elif choice == "5":
            print("Thank you for using the Student Management System. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option (1/2/3/4/5).")

if __name__ == "__main__":
    main()



